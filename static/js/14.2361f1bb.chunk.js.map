{"version":3,"sources":["../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../node_modules/micromark-extension-gfm-strikethrough/lib/html.js","../node_modules/micromark-extension-gfm-table/lib/syntax.js","../node_modules/micromark-extension-gfm-tagfilter/index.js","../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../node_modules/micromark-extension-gfm/index.js","../node_modules/ccount/index.js","../node_modules/mdast-util-find-and-replace/lib/index.js","../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../node_modules/mdast-util-gfm-autolink-literal/index.js","../node_modules/mdast-util-to-markdown/lib/util/association.js","../node_modules/mdast-util-to-markdown/lib/util/track.js","../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","../node_modules/mdast-util-to-markdown/lib/util/safe.js","../node_modules/mdast-util-gfm-footnote/index.js","../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","../node_modules/mdast-util-gfm-strikethrough/index.js","../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","../node_modules/markdown-table/index.js","../node_modules/mdast-util-gfm-table/lib/index.js","../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","../node_modules/mdast-util-gfm-task-list-item/index.js","../node_modules/mdast-util-gfm/lib/index.js","../node_modules/remark-gfm/index.js"],"names":["www","tokenize","effects","ok","nok","code","consume","w2","w3","dot","after","markdownLineEnding","partial","domain","hasUnderscoreInLastSegment","hasUnderscoreInLastLastSegment","check","namedCharacterReference","done","punctuationContinuation","punctuation","asciiControl","unicodeWhitespace","unicodePunctuation","undefined","path","balance","inPath","continuedPunctuation","parenAtPathEnd","pathEnd","trailingPunctuation","inside","asciiAlpha","wwwAutolink","self","this","previousWww","previous","previousUnbalanced","events","enter","attempt","exit","httpAutolink","previousHttp","t1","t2","p","s","colon","slash1","slash2","emailAutolink","hasDot","hasDigitInLastSegment","gfmAtext","previousEmail","atext","label","dotContinuation","dashOrUnderscoreContinuation","asciiAlphanumeric","asciiDigit","afterDashOrUnderscore","text","gfmAutolinkLiteral","markdownLineEndingOrSpace","index","length","result","token","type","_balanced","_gfmAutolinkLiteralWalkedInto","indent","factorySpace","tail","sliceSerialize","gfmFootnote","document","tokenizeDefinitionStart","continuation","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","tokenizeGfmFootnoteCall","add","tokenizePotentialGfmFootnoteCall","resolveTo","resolveToPotentialGfmFootnoteCall","labelStart","defined","parser","gfmFootnotes","id","normalizeIdentifier","start","end","now","charCodeAt","includes","slice","context","call","Object","assign","marker","column","offset","_bufferIndex","string","chunk","contentType","replacement","splice","data","size","callStart","callData","callEscape","identifier","_container","atBreak","labelAfter","labelEscape","push","blankLine","gfmStrikethrough","options","single","singleTilde","tokenizer","tokenizeStrikethrough","resolveAll","resolveAllStrikethrough","insideSpan","null","attentionMarkers","_close","open","_open","strikethrough","nextEvents","constructs","more","before","classifyCharacter","Boolean","gfmTable","flow","seenDelimiter","hasDash","align","tableHeaderCount","_align","cellDividerHead","inCellContentHead","cellBreakHead","originalInterrupt","interrupt","tokenizeRowEnd","atDelimiterRowBreak","atRowEndHead","markdownSpace","inWhitespaceHead","inCellContentEscapeHead","rowEndDelimiter","inWhitespaceDelimiter","inFillerDelimiter","afterLeftAlignment","afterRightAlignment","tableClose","nextPrefixedOrBlank","bodyStart","rowStartBody","cellDividerBody","inCellContentBody","cellBreakBody","tableBodyClose","atRowEndBody","inWhitespaceBody","inCellContentEscapeBody","prefixed","lazy","line","disable","_gfmTableDynamicInterruptHack","resolve","inHead","inDelimiterRow","inRow","contentStart","contentEnd","cellStart","seenCellInRow","content","cell","whitespace","reFlow","RegExp","source","tasklistCheck","_gfmTasklistFirstContentOfListItem","close","spaceThenNonSpace","gfmTaskListItem","gfm","combineExtensions","ccount","value","character","String","TypeError","count","indexOf","own","hasOwnProperty","findAndReplace","tree","find","replace","settings","schema","ignored","convert","ignore","pairs","Array","isArray","toExpression","toFunction","key","toPairs","pairIndex","visitParents","visitor","node","parents","grandparent","parent","children","position","nodes","lastIndex","match","exec","matchObject","input","stack","global","handler","escape","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transforms","findUrl","findEmail","literalAutolink","title","url","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","config","autolinkEmail","autolinkProtocol","gfmAutolinkLiteralToMarkdown","unsafe","_","protocol","prefix","test","parts","split","isCorrectDomain","closingParenIndex","openingParens","closingParens","trail","trailExec","splitUrl","email","association","decodeString","track","options_","lineShift","move","chunks","current","shift","containerFlow","safeOptions","indexStack","tracker","results","child","handle","bulletLastUsed","between","pop","join","left","right","repeat","eol","indentLines","map","one","patternCompile","pattern","_compiled","patternInScope","listInScope","list","none","safe","positions","infos","expression","sort","numerical","escapeBackslashes","charAt","encode","toString","toUpperCase","a","b","whole","gfmFootnoteToMarkdown","footnoteReference","peek","handlers","footnoteDefinition","subexit","blank","containerPhrasing","gfmStrikethroughFromMarkdown","canContainEols","gfmStrikethroughToMarkdown","delete","handleDelete","inlineCode","sequence","serialize","defaultStringLength","toAlignment","codePointAt","gfmTableFromMarkdown","table","d","setData","tableData","enterCell","tableHeader","tableRow","codeText","resume","getData","$0","$1","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","tableCell","handleTableCell","matrix","concat","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","Math","max","lines","delimiterStart","delimiterEnd","markdownTable","listItem","listItemIndent","style","Error","checkListItemIndent","bullet","bulletCurrent","checkBullet","ordered","incrementListMarker","spread","ceil","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","paragraph","firstParaghraph","siblings","head","checked","sibling","gfmTaskListItemToMarkdown","checkable","checkbox","gfmFromMarkdown","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","buffer","gfmFootnoteCall","gfmFootnoteCallString","toLowerCase","gfmToMarkdown","extensions","remarkGfm","field"],"mappings":"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","file":"static/js/14.2361f1bb.chunk.js","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  asciiDigit,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst www = {\n  tokenize: tokenizeWww,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst punctuation = {\n  tokenize: tokenizePunctuation,\n  partial: true\n}\nconst namedCharacterReference = {\n  tokenize: tokenizeNamedCharacterReference,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst httpAutolink = {\n  tokenize: tokenizeHttpAutolink,\n  previous: previousHttp\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n/** @type {ConstructRecord} */\n\nconst text = {}\n/** @type {Extension} */\n\nexport const gfmAutolinkLiteral = {\n  text\n}\nlet code = 48 // Add alphanumerics.\n\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\n\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, httpAutolink]\ntext[104] = [emailAutolink, httpAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n/** @type {Tokenizer} */\n\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean} */\n\n  let hasDot\n  /** @type {boolean|undefined} */\n\n  let hasDigitInLastSegment\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n  /** @type {State} */\n\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n\n    if (code === 64) {\n      effects.consume(code)\n      return label\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (code === 46) {\n      return effects.check(punctuation, done, dotContinuation)(code)\n    }\n\n    if (code === 45 || code === 95) {\n      return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code)\n    }\n\n    if (asciiAlphanumeric(code)) {\n      if (!hasDigitInLastSegment && asciiDigit(code)) {\n        hasDigitInLastSegment = true\n      }\n\n      effects.consume(code)\n      return label\n    }\n\n    return done(code)\n  }\n  /** @type {State} */\n\n  function dotContinuation(code) {\n    effects.consume(code)\n    hasDot = true\n    hasDigitInLastSegment = undefined\n    return label\n  }\n  /** @type {State} */\n\n  function dashOrUnderscoreContinuation(code) {\n    effects.consume(code)\n    return afterDashOrUnderscore\n  }\n  /** @type {State} */\n\n  function afterDashOrUnderscore(code) {\n    if (code === 46) {\n      return effects.check(punctuation, nok, dotContinuation)(code)\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (hasDot && !hasDigitInLastSegment) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww') // For `www.` we check instead of attempt, because when it matches, GH\n    // treats it as part of a domain (yes, it says a valid domain must come\n    // after `www.`, but that’s not how it’s implemented by them).\n\n    return effects.check(\n      www,\n      effects.attempt(domain, effects.attempt(path, done), nok),\n      nok\n    )(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHttpAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 72 && code !== 104) ||\n      !previousHttp(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkHttp')\n    effects.consume(code)\n    return t1\n  }\n  /** @type {State} */\n\n  function t1(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return t2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function t2(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return p\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function p(code) {\n    if (code === 80 || code === 112) {\n      effects.consume(code)\n      return s\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function s(code) {\n    if (code === 83 || code === 115) {\n      effects.consume(code)\n      return colon\n    }\n\n    return colon(code)\n  }\n  /** @type {State} */\n\n  function colon(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return slash1\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash1(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return slash2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash2(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, done), nok)(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWww(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return w2\n  }\n  /** @type {State} */\n\n  function w2(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return w3\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function w3(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return dot\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function dot(code) {\n    if (code === 46) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? nok(code) : ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean|undefined} */\n  let hasUnderscoreInLastSegment\n  /** @type {boolean|undefined} */\n\n  let hasUnderscoreInLastLastSegment\n  return domain\n  /** @type {State} */\n\n  function domain(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        done,\n        punctuationContinuation\n      )(code)\n    }\n\n    if (code === 46 || code === 95) {\n      return effects.check(punctuation, done, punctuationContinuation)(code)\n    } // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n\n    if (\n      code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return done(code)\n    }\n\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function punctuationContinuation(code) {\n    if (code === 46) {\n      hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment\n      hasUnderscoreInLastSegment = undefined\n      effects.consume(code)\n      return domain\n    }\n\n    if (code === 95) hasUnderscoreInLastSegment = true\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment) {\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePath(effects, ok) {\n  let balance = 0\n  return inPath\n  /** @type {State} */\n\n  function inPath(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        ok,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (code === 40) {\n      balance++\n    }\n\n    if (code === 41) {\n      return effects.check(\n        punctuation,\n        parenAtPathEnd,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (pathEnd(code)) {\n      return ok(code)\n    }\n\n    if (trailingPunctuation(code)) {\n      return effects.check(punctuation, ok, continuedPunctuation)(code)\n    }\n\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function continuedPunctuation(code) {\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function parenAtPathEnd(code) {\n    balance--\n    return balance < 0 ? ok(code) : continuedPunctuation(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNamedCharacterReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (code === 59) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // If the named character reference is followed by the end of the path, it’s\n    // not continued punctuation.\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePunctuation(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // Check the next.\n    if (trailingPunctuation(code)) {\n      effects.consume(code)\n      return after\n    } // If the punctuation marker is followed by the end of the path, it’s not\n    // continued punctuation.\n\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction trailingPunctuation(code) {\n  return (\n    code === 33 ||\n    code === 34 ||\n    code === 39 ||\n    code === 41 ||\n    code === 42 ||\n    code === 44 ||\n    code === 46 ||\n    code === 58 ||\n    code === 59 ||\n    code === 60 ||\n    code === 63 ||\n    code === 95 ||\n    code === 126\n  )\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction pathEnd(code) {\n  return code === null || code === 60 || markdownLineEndingOrSpace(code)\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousHttp(code) {\n  return code === null || !asciiAlpha(code)\n}\n/** @type {Previous} */\n\nfunction previousEmail(code) {\n  return code !== 47 && previousHttp(code)\n}\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\n\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n\n  while (index--) {\n    const token = events[index][1]\n\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    } // @ts-expect-error If we’ve seen this token, and it was marked as not\n    // having any unbalanced bracket before it, we can exit.\n\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n\n  if (events.length > 0 && !result) {\n    // @ts-expect-error Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @returns {Extension}\n */\n\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    const token = self.events[index][1]\n\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    } // Exit if we’ve walked far enough.\n\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n\n    if (id.charCodeAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n/** @type {Resolver} */\n\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token|undefined} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker' // The whole (without `!`):\n\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // The `^` marker\n\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  } // Increment the end 1 character.\n\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n  /** @type {Array<Event>} */\n\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context], // The `[`\n    events[index + 3],\n    events[index + 4], // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context], // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context], // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n  /** @type {State} */\n\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n  /** @type {State} */\n\n  function callData(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size++ > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      effects.exit('chunkString')\n      token = effects.exit('gfmFootnoteCallString')\n      return defined.includes(normalizeIdentifier(self.sliceSerialize(token)))\n        ? end(code)\n        : nok(code)\n    }\n\n    effects.consume(code)\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    return code === 92 ? callEscape : callData\n  }\n  /** @type {State} */\n\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n\n    return callData(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    effects.exit('gfmFootnoteCall')\n    return ok\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n\n  let identifier\n  let size = 0\n  /** @type {boolean|undefined} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelStart\n  }\n  /** @type {State} */\n\n  function labelStart(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      return atBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      size++\n      return atBreak\n    }\n\n    effects.enter('chunkString').contentType = 'string'\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      markdownLineEnding(code) ||\n      code === 91 ||\n      code === 93 ||\n      size > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n\n      return factorySpace(effects, done, 'gfmFootnoteDefinitionWhitespace')\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!defined.includes(identifier)) {\n      defined.push(identifier)\n    }\n\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n/** @type {Exiter} */\n\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfmStrikethrough(options = {}) {\n  let single = options.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n\n  function resolveAllStrikethrough(events, context) {\n    let index = -1 // Walk through all events.\n\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index // Now walk back to find an opener.\n\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open && // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            } // Opening.\n\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ] // Between.\n\n            splice(\n              nextEvents,\n              nextEvents.length,\n              0,\n              resolveAll(\n                context.parser.constructs.insideSpan.null,\n                events.slice(open + 1, index),\n                context\n              )\n            ) // Closing.\n\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n\n    return events\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n    /** @type {State} */\n\n    function more(code) {\n      const before = classifyCharacter(previous)\n\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/** @type {HtmlExtension} */\nexport const gfmStrikethroughHtml = {\n  enter: {\n    strikethrough() {\n      this.tag('<del>')\n    }\n  },\n  exit: {\n    strikethrough() {\n      this.tag('</del>')\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n/**\n * @typedef {'left'|'center'|'right'|'none'} Align\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Extension} */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolve: resolveTable\n    }\n  }\n}\nconst nextPrefixedOrBlank = {\n  tokenize: tokenizeNextPrefixedOrBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  /** @type {boolean|undefined} */\n\n  let inHead\n  /** @type {boolean|undefined} */\n\n  let inDelimiterRow\n  /** @type {boolean|undefined} */\n\n  let inRow\n  /** @type {number|undefined} */\n\n  let contentStart\n  /** @type {number|undefined} */\n\n  let contentEnd\n  /** @type {number|undefined} */\n\n  let cellStart\n  /** @type {boolean|undefined} */\n\n  let seenCellInRow\n\n  while (++index < events.length) {\n    const token = events[index][1]\n\n    if (inRow) {\n      if (token.type === 'temporaryTableCellContent') {\n        contentStart = contentStart || index\n        contentEnd = index\n      }\n\n      if (\n        // Combine separate content parts into one.\n        (token.type === 'tableCellDivider' || token.type === 'tableRow') &&\n        contentEnd\n      ) {\n        const content = {\n          type: 'tableContent',\n          start: events[contentStart][1].start,\n          end: events[contentEnd][1].end\n        }\n        /** @type {Token} */\n\n        const text = {\n          type: 'chunkText',\n          start: content.start,\n          end: content.end,\n          // @ts-expect-error It’s fine.\n          contentType: 'text'\n        }\n        events.splice(\n          contentStart,\n          contentEnd - contentStart + 1,\n          ['enter', content, context],\n          ['enter', text, context],\n          ['exit', text, context],\n          ['exit', content, context]\n        )\n        index -= contentEnd - contentStart - 3\n        contentStart = undefined\n        contentEnd = undefined\n      }\n    }\n\n    if (\n      events[index][0] === 'exit' &&\n      cellStart !== undefined &&\n      cellStart + (seenCellInRow ? 0 : 1) < index &&\n      (token.type === 'tableCellDivider' ||\n        (token.type === 'tableRow' &&\n          (cellStart + 3 < index ||\n            events[cellStart][1].type !== 'whitespace')))\n    ) {\n      const cell = {\n        type: inDelimiterRow\n          ? 'tableDelimiter'\n          : inHead\n          ? 'tableHeader'\n          : 'tableData',\n        start: events[cellStart][1].start,\n        end: events[index][1].end\n      }\n      events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, [\n        'exit',\n        cell,\n        context\n      ])\n      events.splice(cellStart, 0, ['enter', cell, context])\n      index += 2\n      cellStart = index + 1\n      seenCellInRow = true\n    }\n\n    if (token.type === 'tableRow') {\n      inRow = events[index][0] === 'enter'\n\n      if (inRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableDelimiterRow') {\n      inDelimiterRow = events[index][0] === 'enter'\n\n      if (inDelimiterRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableHead') {\n      inHead = events[index][0] === 'enter'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  /** @type {Array<Align>} */\n\n  const align = []\n  let tableHeaderCount = 0\n  /** @type {boolean|undefined} */\n\n  let seenDelimiter\n  /** @type {boolean|undefined} */\n\n  let hasDash\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // @ts-expect-error Custom.\n    effects.enter('table')._align = align\n    effects.enter('tableHead')\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    }\n\n    tableHeaderCount++\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function cellDividerHead(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    seenDelimiter = true\n    return cellBreakHead\n  }\n  /** @type {State} */\n\n  function cellBreakHead(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndHead(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    if (seenDelimiter) {\n      seenDelimiter = undefined\n      tableHeaderCount++\n    }\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceHead(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    effects.exit('whitespace')\n    return cellBreakHead(code)\n  }\n  /** @type {State} */\n\n  function inCellContentHead(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakHead(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeHead : inCellContentHead\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeHead(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentHead\n    } // Anything else.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function atRowEndHead(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    effects.exit('tableRow')\n    effects.exit('tableHead')\n    const originalInterrupt = self.interrupt\n    self.interrupt = true\n    return effects.attempt(\n      {\n        tokenize: tokenizeRowEnd,\n        partial: true\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        effects.enter('tableDelimiterRow')\n        return atDelimiterRowBreak(code)\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        return nok(code)\n      }\n    )(code)\n  }\n  /** @type {State} */\n\n  function atDelimiterRowBreak(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      align.push('none')\n      return inFillerDelimiter\n    }\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align.push('left')\n      return afterLeftAlignment\n    } // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceDelimiter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    effects.exit('whitespace')\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function inFillerDelimiter(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return inFillerDelimiter\n    }\n\n    effects.exit('tableDelimiterFiller')\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align[align.length - 1] =\n        align[align.length - 1] === 'left' ? 'center' : 'right'\n      return afterRightAlignment\n    }\n\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function afterLeftAlignment(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      return inFillerDelimiter\n    } // Anything else is not ok.\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function afterRightAlignment(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    } // `|`\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function rowEndDelimiter(code) {\n    effects.exit('tableDelimiterRow') // Exit if there was no dash at all, or if the header cell count is not the\n    // delimiter cell count.\n\n    if (!hasDash || tableHeaderCount !== align.length) {\n      return nok(code)\n    }\n\n    if (code === null) {\n      return tableClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, bodyStart, 'linePrefix', 4),\n        tableClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableClose(code) {\n    effects.exit('table')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function bodyStart(code) {\n    effects.enter('tableBody')\n    return rowStartBody(code)\n  }\n  /** @type {State} */\n\n  function rowStartBody(code) {\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    }\n\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function cellDividerBody(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    return cellBreakBody\n  }\n  /** @type {State} */\n\n  function cellBreakBody(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndBody(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceBody\n    } // `|`\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceBody(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceBody\n    }\n\n    effects.exit('whitespace')\n    return cellBreakBody(code)\n  }\n  /** @type {State} */\n\n  function inCellContentBody(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakBody(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeBody : inCellContentBody\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeBody(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentBody\n    } // Anything else.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function atRowEndBody(code) {\n    effects.exit('tableRow')\n\n    if (code === null) {\n      return tableBodyClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableBodyClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, rowStartBody, 'linePrefix', 4),\n        tableBodyClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableBodyClose(code) {\n    effects.exit('tableBody')\n    return tableClose(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeRowEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, prefixed, 'linePrefix')\n    }\n    /** @type {State} */\n\n    function prefixed(code) {\n      // Blank or interrupting line.\n      if (\n        self.parser.lazy[self.now().line] ||\n        code === null ||\n        markdownLineEnding(code)\n      ) {\n        return nok(code)\n      }\n\n      const tail = self.events[self.events.length - 1] // Indented code can interrupt delimiter and body rows.\n\n      if (\n        !self.parser.constructs.disable.null.includes('codeIndented') &&\n        tail &&\n        tail[1].type === 'linePrefix' &&\n        tail[2].sliceSerialize(tail[1], true).length >= 4\n      ) {\n        return nok(code)\n      }\n\n      self._gfmTableDynamicInterruptHack = true\n      return effects.check(\n        self.parser.constructs.flow,\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return nok(code)\n        },\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return ok(code)\n        }\n      )(code)\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextPrefixedOrBlank(effects, ok, nok) {\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // This is a check, so we don’t care about tokens, but we open a bogus one\n    // so we’re valid.\n    effects.enter('check') // EOL.\n\n    effects.consume(code)\n    return whitespace\n  }\n  /** @type {State} */\n\n  function whitespace(code) {\n    if (code === -1 || code === 32) {\n      effects.consume(code)\n      size++\n      return size === 4 ? ok : whitespace\n    } // EOF or whitespace\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      return ok(code)\n    } // Anything else.\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n */\n\n/**\n * An opening or closing tag, followed by a case-insensitive specific tag name,\n * followed by HTML whitespace, a greater than, or a slash.\n */\nconst reFlow =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n/**\n * As HTML (text) parses tags separately (and v. strictly), we don’t need to be\n * global.\n */\nconst reText = new RegExp('^' + reFlow.source, 'i')\n\n/** @type {HtmlExtension} */\nexport const gfmTagfilterHtml = {\n  exit: {\n    htmlFlowData(token) {\n      exitHtmlData.call(this, token, reFlow)\n    },\n    htmlTextData(token) {\n      exitHtmlData.call(this, token, reText)\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n */\nfunction exitHtmlData(token, filter) {\n  let value = this.sliceSerialize(token)\n\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2')\n  }\n\n  this.raw(this.encode(value))\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n  /** @type {State} */\n\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null || // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this\n  return factorySpace(effects, after, 'whitespace')\n  /** @type {State} */\n\n  function after(code) {\n    const tail = self.events[self.events.length - 1]\n    return (\n      // We either found spaces…\n      ((tail && tail[1].type === 'whitespace') || // …or it was followed by a line ending, in which case, there has to be\n        // non-whitespace after that line ending, because otherwise we’d get an\n        // EOF as the content is closed with blank lines.\n        markdownLineEnding(code)) &&\n        code !== null\n        ? ok(code)\n        : nok(code)\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Support GFM or markdown on github.com.\n *\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Support to compile GFM to HTML.\n *\n * @param {HtmlOptions} [options]\n * @returns {HtmlExtension}\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {Test} [ignore]\n *   `unist-util-is` test used to assert parents\n *\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {Content|Root} Node\n * @typedef {Exclude<Extract<Node, import('mdast').Parent>, Root>} Parent\n *\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n *\n * @typedef RegExpMatchObject\n * @property {number} index\n * @property {string} input\n * @property {[Root, ...Array<Parent>, Text]} stack\n *\n * @typedef {string|RegExp} Find\n * @typedef {string|ReplaceFunction} Replace\n *\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n * @typedef {Array<Pair>} Pairs\n */\n\n/**\n * @callback ReplaceFunction\n * @param {...any} parameters\n * @returns {Array<PhrasingContent>|PhrasingContent|string|false|undefined|null}\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param tree mdast tree\n * @param find Value to find and remove. When `string`, escaped and made into a global `RegExp`\n * @param [replace] Value to insert.\n *   * When `string`, turned into a Text node.\n *   * When `Function`, called with the results of calling `RegExp.exec` as\n *     arguments, in which case it can return a single or a list of `Node`,\n *     a `string` (which is wrapped in a `Text` node), or `false` to not replace\n * @param [options] Configuration.\n */\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   ((tree: Node, find: Find, replace?: Replace, options?: Options) => Node) &\n   *   ((tree: Node, schema: FindAndReplaceSchema|FindAndReplaceList, options?: Options) => Node)\n   * )}\n   **/\n  (\n    /**\n     * @param {Node} tree\n     * @param {Find|FindAndReplaceSchema|FindAndReplaceList} find\n     * @param {Replace|Options} [replace]\n     * @param {Options} [options]\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options|undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent|undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = /** @type {Parent} */ (parents[index])\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error mdast vs. unist parent.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          // @ts-expect-error: stack is fine.\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * @param {Text} node\n       * @param {[Root, ...Array<Parent>]} parents\n       * @returns {VisitorResult}\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n        /** @type {number|undefined} */\n        let position\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          if (value === false) {\n            position = undefined\n          } else {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (position === undefined) {\n          nodes = [node]\n        } else {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * @param {FindAndReplaceSchema|FindAndReplaceList} schema\n * @returns {Pairs}\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {Find} find\n * @returns {RegExp}\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * @param {Replace} replace\n * @returns {ReplaceFunction}\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown/lib/types.js').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n * @typedef {import('mdast-util-find-and-replace').PhrasingContent} PhrasingContent\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\nconst inConstruct = 'phrasing'\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/** @type {FromMarkdownExtension} */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {PhrasingContent} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[_-\\d]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string|undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n  /** @type {number} */\n  let closingParenIndex\n  /** @type {number} */\n  let openingParens\n  /** @type {number} */\n  let closingParens\n  /** @type {string|undefined} */\n  let trail\n\n  if (trailExec) {\n    url = url.slice(0, trailExec.index)\n    trail = trailExec[0]\n    closingParenIndex = trail.indexOf(')')\n    openingParens = ccount(url, '(')\n    closingParens = ccount(url, ')')\n\n    while (closingParenIndex !== -1 && openingParens > closingParens) {\n      url += trail.slice(0, closingParenIndex + 1)\n      trail = trail.slice(closingParenIndex + 1)\n      closingParenIndex = trail.indexOf(')')\n      closingParens++\n    }\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('mdast').Association} Association\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another: controversially,\n * character escapes and references don’t work in this matching: `&copy;` does\n * not match `©`, and `\\+` does not match `+`.\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character escapes\n * and all character references.\n *\n * @param {Association} node\n * @returns {string}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('unist').Point} Point\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * Functions to track output positions.\n * This info isn’t used yet but suchs functionality allows line wrapping,\n * and theoretically source maps (though, is there practical use in that?).\n *\n * @param {TrackFields} options_\n */\nexport function track(options_) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = options_ || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @returns {{now: Point, lineShift: number}}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @param {number} value\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past a string.\n   *\n   * @param {string} value\n   * @returns {string}\n   */\n  function move(value = '') {\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Join} Join\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\nimport {track} from './track.js'\n\n/**\n * @param {Parent} parent\n * @param {Context} context\n * @param {TrackFields} safeOptions\n * @returns {string}\n */\nexport function containerFlow(parent, context, safeOptions) {\n  const indexStack = context.indexStack\n  const children = parent.children || []\n  const tracker = track(safeOptions)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        context.handle(child, parent, context, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      context.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(tracker.move(between(child, children[index + 1])))\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n\n  /**\n   * @param {Node} left\n   * @param {Node} right\n   * @returns {string}\n   */\n  function between(left, right) {\n    let index = context.join.length\n\n    while (index--) {\n      const result = context.join[index](left, right, parent, context)\n\n      if (result === true || result === 1) {\n        break\n      }\n\n      if (typeof result === 'number') {\n        return '\\n'.repeat(1 + result)\n      }\n\n      if (result === false) {\n        return '\\n\\n<!---->\\n\\n'\n      }\n    }\n\n    return '\\n\\n'\n  }\n}\n","/**\n * @callback Map\n * @param {string} value\n * @param {number} line\n * @param {boolean} blank\n * @returns {string}\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @param {string} value\n * @param {Map} map\n * @returns {string}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray|null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Array<string>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<string>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (!list) {\n    return none\n  }\n\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').SafeOptions} SafeOptions\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * @param {Context} context\n * @param {string|null|undefined} input\n * @param {SafeOptions & {encode?: Array<string>}} config\n * @returns {string}\n */\nexport function safe(context, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < context.unsafe.length) {\n    const pattern = context.unsafe[index]\n\n    if (!patternInScope(context.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray|null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray|null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/**\n * @returns {FromMarkdownExtension}\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteDefinition(token) {\n    this.enter(\n      {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n      token\n    )\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteDefinitionLabelString() {\n    this.buffer()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteDefinitionLabelString(token) {\n    const label = this.resume()\n    const node = /** @type {FootnoteDefinition} */ (\n      this.stack[this.stack.length - 1]\n    )\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteDefinition(token) {\n    this.exit(token)\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteCall(token) {\n    this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function enterFootnoteCallString() {\n    this.buffer()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteCallString(token) {\n    const label = this.resume()\n    const node = /** @type {FootnoteDefinition} */ (\n      this.stack[this.stack.length - 1]\n    )\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /** @type {FromMarkdownHandle} */\n  function exitFootnoteCall(token) {\n    this.exit(token)\n  }\n}\n\n/**\n * @returns {ToMarkdownExtension}\n */\nexport function gfmFootnoteToMarkdown() {\n  footnoteReference.peek = footnoteReferencePeek\n\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteReference} node\n   */\n  function footnoteReference(node, _, context, safeOptions) {\n    const tracker = track(safeOptions)\n    let value = tracker.move('[^')\n    const exit = context.enter('footnoteReference')\n    const subexit = context.enter('reference')\n    value += tracker.move(\n      safe(context, association(node), {\n        ...tracker.current(),\n        before: value,\n        after: ']'\n      })\n    )\n    subexit()\n    exit()\n    value += tracker.move(']')\n    return value\n  }\n\n  /** @type {ToMarkdownHandle} */\n  function footnoteReferencePeek() {\n    return '['\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, context, safeOptions) {\n    const tracker = track(safeOptions)\n    let value = tracker.move('[^')\n    const exit = context.enter('footnoteDefinition')\n    const subexit = context.enter('label')\n    value += tracker.move(\n      safe(context, association(node), {\n        ...tracker.current(),\n        before: value,\n        after: ']'\n      })\n    )\n    subexit()\n    value += tracker.move(\n      ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n    )\n    tracker.shift(4)\n    value += tracker.move(\n      indentLines(containerFlow(node, context, tracker.current()), map)\n    )\n    exit()\n\n    return value\n\n    /** @type {Map} */\n    function map(line, index, blank) {\n      if (index) {\n        return (blank ? '' : '    ') + line\n      }\n\n      return line\n    }\n  }\n}\n","/**\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').SafeOptions} SafeOptions\n * @typedef {import('../types.js').Context} Context\n */\n\nimport {track} from './track.js'\n\n/**\n * @param {Parent} parent\n * @param {Context} context\n * @param {SafeOptions} safeOptions\n * @returns {string}\n */\nexport function containerPhrasing(parent, context, safeOptions) {\n  const indexStack = context.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = safeOptions.before\n\n  indexStack.push(-1)\n  let tracker = track(safeOptions)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = context.handle.handlers[children[index + 1].type]\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, context, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = safeOptions.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = track(safeOptions)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        context.handle(child, parent, context, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [{character: '~', inConstruct: 'phrasing'}],\n  handlers: {delete: handleDelete}\n}\n\nhandleDelete.peek = peekDelete\n\n/** @type {FromMarkdownHandle} */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('emphasis')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @type {Handle}\n * @param {InlineCode} node\n */\nexport function inlineCode(node, _, context) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < context.unsafe.length) {\n    const pattern = context.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray|null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @type {Handle}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|Array<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {Array<Array<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').AlignType} AlignType\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n *\n * @typedef Options\n * @property {boolean} [tableCellPadding=true]\n * @property {boolean} [tablePipeAlign=true]\n * @property {MarkdownTableOptions['stringLength']} [stringLength]\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterTable(token) {\n  /** @type {Array<'left'|'right'|'center'|'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownHandle} */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/** @type {FromMarkdownHandle} */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * @param {Options} [options]\n * @returns {ToMarkdownExtension}\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      // @ts-expect-error: fixed in `markdown-table@3.0.1`.\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    // `markdown-table` will always add an align row\n    const value = serializeData([row])\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string>} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      alignDelimiters,\n      padding,\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('../util/indent-lines.js').Map} Map\n * @typedef {import('../types.js').Options} Options\n * @typedef {import('../types.js').Handle} Handle\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\nimport {containerFlow} from '../util/container-flow.js'\nimport {indentLines} from '../util/indent-lines.js'\nimport {track} from '../util/track.js'\n\n/**\n * @type {Handle}\n * @param {ListItem} node\n */\nexport function listItem(node, parent, context, safeOptions) {\n  const listItemIndent = checkListItemIndent(context)\n  let bullet = context.bulletCurrent || checkBullet(context)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (context.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = track(safeOptions)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = context.enter('listItem')\n  const value = indentLines(\n    containerFlow(node, context, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['listItemIndent'], undefined>}\n */\nexport function checkListItemIndent(context) {\n  const style = context.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').Context} Context\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {Context} context\n * @returns {Exclude<Options['bullet'], undefined>}\n */\nexport function checkBullet(context) {\n  const marker = context.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {Extract<import('mdast').Root|import('mdast').Content, import('unist').Parent>} Parent\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n/** @type {FromMarkdownExtension} */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/** @type {ToMarkdownExtension} */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/** @type {FromMarkdownHandle} */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parent} */ (this.stack[this.stack.length - 2])\n  const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n  const siblings = parent.children\n  const head = node.children[0]\n  let index = -1\n  /** @type {Paragraph|undefined} */\n  let firstParaghraph\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean' &&\n    head &&\n    head.type === 'text'\n  ) {\n    while (++index < siblings.length) {\n      const sibling = siblings[index]\n      if (sibling.type === 'paragraph') {\n        firstParaghraph = sibling\n        break\n      }\n    }\n\n    if (firstParaghraph === node) {\n      // Must start with a space or a tab.\n      head.value = head.value.slice(1)\n\n      if (head.value.length === 0) {\n        node.children.shift()\n      } else if (\n        node.position &&\n        head.position &&\n        typeof head.position.start.offset === 'number'\n      ) {\n        head.position.start.column++\n        head.position.start.offset++\n        node.position.start = Object.assign({}, head.position.start)\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-gfm-table').Options} Options\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * @returns {Array<FromMarkdownExtension>}\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * @param {Options} [options]\n * @returns {ToMarkdownExtension}\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n"],"sourceRoot":""}