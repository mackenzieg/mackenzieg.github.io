{"version":3,"file":"static/js/481.0cd57753.chunk.js","mappings":"sIAGA,MA0EA,GAAiBA,aA1EI,CACnB,CACEC,UAAW,0BACXC,MAAO,oDACPC,SAAU,+BACVC,MAAO,qCACPC,KAAM,UACNC,KACE,oRAIJ,CACEL,UAAW,eACXC,MAAO,0CACPC,SAAU,sCACVC,MAAO,mCACPC,KAAM,UACNC,KACE,2LAGJ,CACEL,UAAW,YACXC,MAAO,8BACPC,SAAU,2CACVC,MAAO,gCACPC,KAAM,UACNC,KACE,wJAGJ,CACEL,UAAW,WACXC,MAAO,gCACPC,SAAU,yCACVC,MAAO,2BACPC,KAAM,UACNC,KACE,8JAGJ,CACEL,UAAW,SACXC,MAAO,gBACPC,SAAU,iEACVC,MAAO,iCACPC,KAAM,UACNC,KACE,kPAyByBC,eAlBR,CACrB,0BAA2B,CACzBC,SAAS,8xXAEX,eAAgB,CACdA,SAAS,0jCAEX,YAAa,CACXA,SAAS,sQAEX,WAAY,CACVA,SAAS,sIAEX,SAAU,CACRA,SAAS,iS,uHCjEb,MAAMC,UAAuBC,EAAAA,UAC3BC,WAAAA,GACEC,QACAC,KAAKC,MAAQ,CACb,CACF,CAEAC,iBAAAA,GACE,MAAMC,EAAUC,EAAAA,EAASV,eAAeM,KAAKK,MAAMC,MAAMC,OAAOnB,WAE5De,GACFH,KAAKQ,SAAS,CACZb,SAAUQ,EAAQR,UAGxB,CAEAc,MAAAA,GACE,MAAMC,EAAY,CAChBC,IAAKC,IAAA,IAAC,IACJC,EAAG,IACHC,EAAG,MACHzB,GACDuB,EAAA,OACCG,EAAAA,EAAAA,KAAA,OAAKF,IAAKA,EAAKC,IAAKA,EAAKzB,MAAOA,EAAO2B,MAAO,CAAEC,SAAU,SAAY,GAG1E,OACEF,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CACH7B,MAAM,yBACN8B,YAAY,4CAA2CC,UAEvDC,EAAAA,EAAAA,MAAA,WAASC,UAAU,OAAOC,GAAG,WAAUH,SAAA,EACrCL,EAAAA,EAAAA,KAAA,UAAAK,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOF,SAAA,EACpBL,EAAAA,EAAAA,KAAA,MAAI,cAAY,UAASK,UAACL,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CAACC,GAAG,YAAWL,SAAC,gBAC/CL,EAAAA,EAAAA,KAAA,KAAAK,SAAG,sCAGLpB,KAAKC,MAAMN,WACR0B,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EAAKL,EAAAA,EAAAA,KAAA,KAAAK,SAAG,uBAAqBL,EAAAA,EAAAA,KAACS,EAAAA,GAAI,CAACC,GAAG,YAAYH,UAAU,SAAQF,UAACL,EAAAA,EAAAA,KAAA,KAAAK,SAAG,iBAC5EpB,KAAKC,MAAMN,WAEPoB,EAAAA,EAAAA,KAACW,EAAAA,EAAa,CAACC,WAAYjB,EAAWkB,cAAe,CAACC,EAAAA,GAAWT,SAAUpB,KAAKC,MAAMN,eAInG,EAGFC,EAAekC,aAAe,CAC5BxB,MAAO,MAWT,S","sources":["data/projects/projects.js","pages/projects/ProjectDetails.js"],"sourcesContent":["import raw from 'raw.macro';\n\n// TODO Add a couple lines about each project\nconst projectCards = [\n  {\n    projectId: 'microplastics-resonator',\n    title: 'Microplastic Detection Using Microwave Resonators',\n    subtitle: 'Improve human sustainability',\n    image: '/images/projects/microplastics.jpg',\n    date: '2022-04',\n    desc:\n      'Developed a device to aid microbiologists in detecting microplastics in water to determine pollution in an ecosystem. '\n      + 'Uses a 6 GHz cavity resonator to measure dielectric properties of materials. '\n      + 'Simulated entirely in Ansys HFSS and tested with a microfluidic pump and VNA.',\n  },\n  {\n    projectId: 'mmwave-radar',\n    title: 'mmWave 60GHz Radar Vital Sign Detection',\n    subtitle: 'Breath-rate detection at a distance',\n    image: '/images/projects/mmwaveradar.jpg',\n    date: '2020-04',\n    desc:\n      'Designed a system using the Infineon 60 GHz mmWave radar for detecting breath rates of patients. '\n      + 'Intended for use in care homes to automatically collect health metrics from residents.',\n  },\n  {\n    projectId: 'rf-pulser',\n    title: '6GHz AM Modulated RF Pulser',\n    subtitle: 'AM modulate a signal with a 6GHz carrier',\n    image: '/images/projects/rfpulser.jpg',\n    date: '2021-02',\n    desc:\n      'Designed a 6 GHz VCO with AM modulation and 20 dBm output power. '\n      + 'Created as a side project while taking courses on Signals & Systems and RF Systems.',\n  },\n  {\n    projectId: 'ecg-vest',\n    title: '3-Lead ECG With ARM Dev Board',\n    subtitle: 'For detecting arrhythmia in heartbeats',\n    image: '/images/projects/ecg.jpg',\n    date: '2020-08',\n    desc:\n      'Designed and built a 3-lead ECG for detecting irregular heartbeats. '\n      + 'Planned future development includes detecting other conditions using machine learning.',\n  },\n  {\n    projectId: 'pkm-go',\n    title: 'PokemonGo Bot',\n    subtitle: 'Automatically catches Pokémon, walks, evolves, and XP farms',\n    image: '/images/projects/pokemongo.jpg',\n    date: '2017-01',\n    desc:\n      'At the time, I was really into PokemonGo and wanted a way to level up without constant playing. '\n      + 'As a fun project, I designed and built my own auto XP farming bot, including a pathfinding system to automatically walk and catch Pokémon.',\n  },\n];\n\nconst path = '../../data/projects';\n\nconst projectDetails = {\n  'microplastics-resonator': {\n    markdown: raw(`${path}/microplastics-resonator.md`),\n  },\n  'mmwave-radar': {\n    markdown: raw(`${path}/mmwave-radar.md`),\n  },\n  'rf-pulser': {\n    markdown: raw(`${path}/rf-pulser.md`),\n  },\n  'ecg-vest': {\n    markdown: raw(`${path}/ecg-vest.md`),\n  },\n  'pkm-go': {\n    markdown: raw(`${path}/pkm-go.md`),\n  },\n};\n\nexport default { projectCards, projectDetails };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport reactGfm from 'remark-gfm';\nimport ReactMarkdown from 'react-markdown';\nimport { Link } from 'react-router-dom';\nimport Main from '../../layouts/Main';\nimport projects from '../../data/projects/projects';\n\nclass ProjectDetails extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n    };\n  }\n\n  componentDidMount() {\n    const project = projects.projectDetails[this.props.match.params.projectId];\n\n    if (project) {\n      this.setState({\n        markdown: project.markdown,\n      });\n    }\n  }\n\n  render() {\n    const renderers = {\n      img: ({\n        alt,\n        src,\n        title,\n      }) => (\n        <img alt={alt} src={src} title={title} style={{ maxWidth: '100%' }} />\n      ),\n    };\n    return (\n      <Main\n        title=\"Microplastic Resonator\"\n        description=\"Learn about Mackenzie Goodwin's projects.\"\n      >\n        <article className=\"post\" id=\"projects\">\n          <header>\n            <div className=\"title\">\n              <h2 data-testid=\"heading\"><Link to=\"/projects\">Projects</Link></h2>\n              <p>Some of the projects I like</p>\n            </div>\n          </header>\n          {!this.state.markdown\n            && <div><p>Project Not Found</p><Link to=\"/projects\" className=\"button\"><p>Go back</p></Link></div>}\n          {this.state.markdown\n            // eslint-disable-next-line\n            && <ReactMarkdown components={renderers} remarkPlugins={[reactGfm]} children={this.state.markdown} />}\n        </article>\n      </Main>\n    );\n  }\n}\n\nProjectDetails.defaultProps = {\n  match: null,\n};\n\nProjectDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      projectId: PropTypes.string.isRequired,\n    }),\n  }),\n};\n\nexport default ProjectDetails;\n"],"names":["projectCards","projectId","title","subtitle","image","date","desc","projectDetails","markdown","ProjectDetails","React","constructor","super","this","state","componentDidMount","project","projects","props","match","params","setState","render","renderers","img","_ref","alt","src","_jsx","style","maxWidth","Main","description","children","_jsxs","className","id","Link","to","ReactMarkdown","components","remarkPlugins","reactGfm","defaultProps"],"sourceRoot":""}